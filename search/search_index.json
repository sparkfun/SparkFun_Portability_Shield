{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>This is just a placeholder file for the webpage re-direct. All the content for this section is actually in the <code>introduction.md</code> file.</p>"},{"location":"arduino_example/","title":"Arduino Examples","text":""},{"location":"arduino_example/#example-1-navigation-switch","title":"Example 1: Navigation Switch","text":"<p>This example demonstrates how to use the navigation switch and detect if the SD card is inserted. The !INT pin of the GPIO expander IC (PCA9554) triggers an interrupt any time a button is pressed or an SD card is inserted/removed.</p> <p>The code for this example can be found in the Firmware folder of this repository. Alternatively, you can expand the link below and copy and paste the code into a shiny new Arduino sketch: </p> Example 1 Arduino Code <pre><code>/*\n  Read the 5-way switch and card detect on the Portability Shield\n  By: Nathan Seidle\n  SparkFun Electronics\n  Date: November 24th, 2024\n  License: This code is public domain but you buy me a drink if you use this\n  and we meet someday (Drink license).\n  Feel like supporting our work? Buy a board from SparkFun!\n  https://www.sparkfun.com/products/27510\n\n  This example demonstrates how to read the 5-way nav switch and detect if the SD card is inserted.\n  The !INT pin of the GPIO expander IC (PCA9554) triggers an interrupt any time a button is pressed or\n  an SD card is inserted/removed.\n\n  Hardware Connections:\n  Connect the Portability shield to the RTK Postcard or other controller board\n  Open output window at 115200bps\n  Press button on navigation switch\n*/\n\n#include &lt;SparkFun_I2C_Expander_Arduino_Library.h&gt; // Click here to get the library: http://librarymanager/All#SparkFun_I2C_Expander_Arduino_Library\n\nSFE_PCA95XX io(PCA95XX_PCA9554); // Create an instance with the PCA9554 IC\n\nint gpioExpander_up = 0;\nint gpioExpander_down = 1;\nint gpioExpander_right = 2;\nint gpioExpander_left = 3;\nint gpioExpander_center = 4;\nint gpioExpander_cardDetect = 5;\n\nint gpioExpander_interrupt = 14; //INT of PCA9554 is connected to ESP14. Goes low when button is pressed.\n\nbool buttonPressed = false;\n\nvoid IRAM_ATTR gpioExpanderISR()\n{\n  buttonPressed = true;\n}\n\nvoid setup()\n{\n  Serial.begin(115200);\n  delay(250);\n  Serial.println(\"Portability Shield Example\");\n\n  Wire.begin(7, 20); //SDA, SCL. I2C0 on Portability Shield\n\n  // Initialize the PCA95xx with its default I2C address\n  if (io.begin() == false)\n  {\n    Serial.println(\"PCA9554 not detected. Please check wiring. Freezing...\");\n    while (1)\n      ;\n  }\n  Serial.println(\"Portability Shield online!\");\n\n  pinMode(gpioExpander_interrupt, INPUT_PULLUP);\n\n  io.pinMode(gpioExpander_up, INPUT);\n  io.pinMode(gpioExpander_down, INPUT);\n  io.pinMode(gpioExpander_left, INPUT);\n  io.pinMode(gpioExpander_right, INPUT);\n  io.pinMode(gpioExpander_center, INPUT);\n  io.pinMode(gpioExpander_cardDetect, INPUT);\n\n  uint8_t currentState = io.getInputRegister() &amp; 0b00111111; //Ignore unconnected GPIO6/7\n  if (currentState &amp; 0b00100000)\n    Serial.println(\"SD Card detected\");\n  else\n    Serial.println(\"No card detected\");\n\n  //Setup interrupt service routine (ISR)\n  attachInterrupt(gpioExpander_interrupt, gpioExpanderISR, CHANGE);\n}\n\nvoid loop()\n{\n  if (buttonPressed == true)\n  {\n    //Get all the pins in one read\n    uint8_t currentState = io.getInputRegister() &amp; 0b00111111; //Ignore unconnected GPIO6/7\n\n    // Pins are pulled high so when we see low, button is being pressed\n    if ((currentState &amp; (1 &lt;&lt; gpioExpander_up)) == 0)\n      Serial.print(\"Up\");\n    if ((currentState &amp; (1 &lt;&lt; gpioExpander_down)) == 0)\n      Serial.print(\"Down\");\n    if ((currentState &amp; (1 &lt;&lt; gpioExpander_left)) == 0)\n      Serial.print(\"Left\");\n    if ((currentState &amp; (1 &lt;&lt; gpioExpander_right)) == 0)\n      Serial.print(\"Right\");\n    if ((currentState &amp; (1 &lt;&lt; gpioExpander_center)) == 0)\n      Serial.print(\"Center\");\n\n    Serial.println();\n\n    buttonPressed = false;\n  }\n\n  delay(100);\n}\n</code></pre> <p>One thing to note is that you will also need to install the SparkFun I2C Expander Arduino Library if you haven't already. You can search the library from within the Arduino Library manager, download the zip from the GitHub Repository and install it manually, or you can click the link from within the code. Clicking the link will show something like the following: </p> <p></p> <p>SparkFun I2C Expander Arduino Library Install</p> <p>Make sure you've selected the correct board (in this case, you will need to use ESP32 Dev Module from espressif) and port in the Tools menu and then hit the upload button. Once the code has finished uploading, go ahead and open a Serial Monitor. You should see something similar to the following. </p> <p></p> <p>Example 1 Output</p>"},{"location":"arduino_example/#example-2-fuel-gauge","title":"Example 2: Fuel Gauge","text":"<p>This file demonstrates the simple API of the SparkFun MAX17043 Arduino library. Make sure you have a LiPo battery plugged into the JST port. </p> <p>The code for this example can be found in the Firmware folder of this repository. Alternatively, you can expand the link below and copy and paste the code into a shiny new Arduino sketch: </p> Example 2 Arduino Code <pre><code>/*\n  Example1_Simple\n  By: Paul Clark\n  Date: October 23rd 2020\n\n  Based extensively on:\n  MAX17043_Simple_Serial.cpp\n  SparkFun MAX17043 Example Code\n  Jim Lindblom @ SparkFun Electronics\n  Original Creation Date: June 22, 2015\n\n  This file demonstrates the simple API of the SparkFun MAX17043 Arduino library.\n\n  This example will print the gauge's voltage and state-of-charge (SOC) readings\n  to Serial (115200 baud)\n\n  This code is released under the MIT license.\n\n  Distributed as-is; no warranty is given.\n*/\n\n#include &lt;Wire.h&gt; // Needed for I2C\n\n#include &lt;SparkFun_MAX1704x_Fuel_Gauge_Arduino_Library.h&gt; // Click here to get the library: http://librarymanager/All#SparkFun_MAX1704x_Fuel_Gauge_Arduino_Library\n\nSFE_MAX1704X lipo(MAX1704X_MAX17048); // Create a MAX17048\n\ndouble voltage = 0; // Variable to keep track of LiPo voltage\ndouble soc = 0; // Variable to keep track of LiPo state-of-charge (SOC)\nbool alert; // Variable to keep track of whether alert has been triggered\n\nvoid setup()\n{\n  Serial.begin(115200); // Start serial, to output debug data\n  while (!Serial)\n    ; //Wait for user to open terminal\n  Serial.println(F(\"MAX17043 Example\"));\n\n  Wire.begin(7, 20); //SDA, SCL\n\n  // Set up the fuel gauge:\n  if (lipo.begin() == false)\n  {\n    Serial.println(F(\"MAX17043 not detected. Please check wiring. Freezing.\"));\n    while (1)\n      ;\n  }\n\n  // Quick start restarts the MAX17043 in hopes of getting a more accurate\n  // guess for the SOC.\n  lipo.quickStart();\n\n  // We can set an interrupt to alert when the battery SoC gets too low.\n  // We can alert at anywhere between 1% - 32%:\n  lipo.setThreshold(20); // Set alert threshold to 20%.\n}\n\nvoid loop()\n{\n  // lipo.getVoltage() returns a voltage value (e.g. 3.93)\n  voltage = lipo.getVoltage();\n  // lipo.getSOC() returns the estimated state of charge (e.g. 79%)\n  soc = lipo.getSOC();\n  // lipo.getAlert() returns a 0 or 1 (0=alert not triggered)\n  alert = lipo.getAlert();\n\n  // Print the variables:\n  Serial.print(\"Voltage: \");\n  Serial.print(voltage);  // Print the battery voltage\n  Serial.println(\" V\");\n\n  Serial.print(\"Percentage: \");\n  Serial.print(soc); // Print the battery state of charge\n  Serial.println(\" %\");\n\n  Serial.print(\"Alert: \");\n  Serial.println(alert);\n  Serial.println();\n\n  delay(500);\n}\n</code></pre> <p>You will also need to install the SparkFun MAX1704x Fuel Gauge Arduino Library if you haven't already. You can search the library from within the Arduino Library manager, download the zip from the GitHub Repository and install it manually, or you can click the link from within the code. Clicking the link will show something like the following: </p> <p></p> <p>SparkFun MAX1704x Fuel Gauge Arduino Library Install</p> <p>Make sure you've selected the correct board and port in the Tools menu and then hit the upload button. Once the code has finished uploading, go ahead and open a Serial Monitor at 115200 baud. You should see the gauge's voltage and state-of-charge (SOC) readings, similar to the following: </p> <p></p> <p>Example 2 Output</p>"},{"location":"arduino_example/#example-3-display","title":"Example 3: Display","text":"<p>This example demonstrates how to display on the 1.3\" OLED and read the fuel gauge. You should have the Portability Shield connected to the RTK Postcard or other controller and a LiPo battery plugged into the JST port. </p> <p>The code for this example can be found in the Firmware folder of this repository. Alternatively, you can expand the link below and copy and paste the code into a shiny new Arduino sketch: </p> Example 3 Arduino Code <pre><code>/*\n  Display a cube on the OLED at 400kHz. Query the fuel guage periodically.\n  By: Nathan Seidle\n  SparkFun Electronics\n  Date: November 24th, 2024\n  License: This code is public domain but you buy me a drink if you use this\n  and we meet someday (Drink license).\n  Feel like supporting our work? Buy a board from SparkFun!\n  https://www.sparkfun.com/products/27510\n\n  This example demonstrates how to display on the 1.3\" OLED and read the fuel gauge.\n\n  Hardware Connections:\n  Connect the Portability shield to the RTK Postcard or other controller board\n  Open output window at 115200bps\n*/\n#include &lt;Wire.h&gt;\n\n#include &lt;SparkFun_Qwiic_OLED.h&gt; //http://librarymanager/All#SparkFun_Qwiic_OLED\nQwiic1in3OLED myOLED;\n\nint width;\nint height;\n\n// For simple frame rate calculations\nlong drawTotalTime = 0;\nint numberOfDraws = 0;\n\nfloat d = 3;\nfloat px[] = { -d, d, d, -d, -d, d, d, -d};\nfloat py[] = { -d, -d, d, d, -d, -d, d, d};\nfloat pz[] = { -d, -d, -d, -d, d, d, d, d};\n\nfloat p2x[8] = {0};\nfloat p2y[8] = {0};\nfloat r[3] = {0};\n\n#define SHAPE_SIZE 950\n#define ROTATION_SPEED 00\n\n#include &lt;SparkFun_MAX1704x_Fuel_Gauge_Arduino_Library.h&gt; // Click here to get the library: http://librarymanager/All#SparkFun_MAX1704x_Fuel_Gauge_Arduino_Library\nSFE_MAX1704X lipo(MAX1704X_MAX17048);\n\ndouble voltage = 0;\ndouble soc = 0;\nunsigned long lastLipoCheck;\n\nvoid setup()\n{\n  Serial.begin(115200);\n  delay(250);\n  Serial.println(\"OLED + Fuel gauge test\");\n\n  Wire.begin(7, 20); //SDA, SCL\n  Wire.setClock(400000); //Go to 400kHz for faster OLED response\n  //Wire.setClock(1000000); //Moar! It's not 1MHz but it does work.\n\n  if (myOLED.begin() == false)\n  {\n    Serial.println(\"Device begin failed. Freezing...\");\n    while (true);\n  }\n\n  if (lipo.begin() == false)\n  {\n    Serial.println(\"MAX17043 not detected. Please check wiring. Freezing...\");\n    while (1);\n  }\n\n  Serial.println(\"Begin success\");\n\n  width = myOLED.getWidth();\n  height = myOLED.getHeight();\n\n  // For frame rate calc\n  drawTotalTime = 0;\n  numberOfDraws = 0;\n}\n\nvoid loop()\n{\n  drawCube();\n\n  if (millis() - lastLipoCheck &gt; 1000)\n  {\n    lastLipoCheck = millis();\n    voltage = lipo.getVoltage();\n    soc = lipo.getSOC();\n\n    Serial.print(\"Voltage: \");\n    Serial.print(voltage);  // Print the battery voltage\n    Serial.println(\" V\");\n\n    Serial.print(\"Percentage: \");\n    Serial.print(soc); // Print the battery state of charge\n    Serial.println(\" %\");\n\n    Serial.println();\n  }\n}\n\nvoid drawCube()\n{\n  r[0] = r[0] + PI / 180.0; // Add a degree\n  r[1] = r[1] + PI / 180.0; // Add a degree\n  r[2] = r[2] + PI / 180.0; // Add a degree\n  if (r[0] &gt;= 360.0 * PI / 180.0)\n    r[0] = 0;\n  if (r[1] &gt;= 360.0 * PI / 180.0)\n    r[1] = 0;\n  if (r[2] &gt;= 360.0 * PI / 180.0)\n    r[2] = 0;\n\n  // This routine gets called often, so just make these statics\n  static float px2, py2, pz2, px3, py3, pz3, ax, ay, az;\n\n  for (int i = 0; i &lt; 8; i++)\n  {\n    px2 = px[i];\n    py2 = cos(r[0]) * py[i] - sin(r[0]) * pz[i];\n    pz2 = sin(r[0]) * py[i] + cos(r[0]) * pz[i];\n\n    px3 = cos(r[1]) * px2 + sin(r[1]) * pz2;\n    py3 = py2;\n    pz3 = -sin(r[1]) * px2 + cos(r[1]) * pz2;\n\n    ax = cos(r[2]) * px3 - sin(r[2]) * py3;\n    ay = sin(r[2]) * px3 + cos(r[2]) * py3;\n    az = pz3 - 150;\n\n    p2x[i] = width / 2 + ax * SHAPE_SIZE / az;\n    p2y[i] = height / 2 + ay * SHAPE_SIZE / az;\n  }\n\n  // Calculate draw time\n  uint32_t startTime = millis();\n\n  myOLED.erase();\n  for (int i = 0; i &lt; 3; i++)\n  {\n    myOLED.line(p2x[i], p2y[i], p2x[i + 1], p2y[i + 1]);\n    myOLED.line(p2x[i + 4], p2y[i + 4], p2x[i + 5], p2y[i + 5]);\n    myOLED.line(p2x[i], p2y[i], p2x[i + 4], p2y[i + 4]);\n  }\n\n  myOLED.line(p2x[3], p2y[3], p2x[0], p2y[0]);\n  myOLED.line(p2x[7], p2y[7], p2x[4], p2y[4]);\n  myOLED.line(p2x[3], p2y[3], p2x[7], p2y[7]);\n  myOLED.display();\n\n  // Write out our frame rate\n  drawTotalTime += millis() - startTime;\n  numberOfDraws++;\n\n  // Output framerate once every 120 frames\n  if (numberOfDraws % 120 == 0)\n  {\n    Serial.print(\"Frame rate: \");\n    Serial.println(numberOfDraws / (float)drawTotalTime * 1000.0);\n\n    numberOfDraws = 0;\n    drawTotalTime = 0;\n  }\n}\n</code></pre> <p>You will also need both the SparkFun Qwiic OLED Arduino Library as well as the SparkFun MAX1704x Fuel Gauge Arduino Library. If you haven't already installed these, you can search them from within the Arduino Library manager and install them from there. Alternatively, you can download the zips from their respective GitHub Repositories here(Fuel Gauge) and here(Qwiic OLED), and install them manually. </p> <p>Make sure you've selected the correct board and port in the Tools menu and then hit the upload button. Once the code has finished uploading, you should see the gauge's voltage and state-of-charge (SOC) readings, similar to the the output for Example 2.  The 1.3\" OLED display should show a bouncing box like so: </p> <p></p> <p>Example 3</p>"},{"location":"arduino_example/#example-4-sd-card","title":"Example 4: SD Card","text":"<p>This example will mount an SD card, analyze the type of card, and output the analysis via the Serial Monitor. </p> <p>Go ahead and connect the Portability Shield to the RTK Postcard or other controller board. Insert a microSD card into the socket. Cards up to 512GB should work.</p> <p>The code for this example can be found in the Firmware folder of this repository. Alternatively, you can expand the link below and copy and paste the code into a shiny new Arduino sketch: </p> Example 4 Arduino Code <pre><code>/*\n  Attempt to mount an SD card and analyze the type of card\n  By: Nathan Seidle\n  SparkFun Electronics\n  Date: November 24th, 2024\n  License: This code is public domain but you buy me a drink if you use this\n  and we meet someday (Drink license).\n  Feel like supporting our work? Buy a board from SparkFun!\n  https://www.sparkfun.com/products/27510\n\n  Hardware Connections:\n  Connect the Portability shield to the RTK Postcard or other controller board\n  Insert a microSD card into the socket. Cards up to 512GB should work.\n  Open output window at 115200bps\n*/\n#include \"SdFat.h\"  // Click here to get the library: http://librarymanager/All#SdFat_SDXC by Bill Greiman\n#include \"sdios.h\"\n\nint pin_spiSCK = 32;\nint pin_spiPICO = 26; //microSD SDI\nint pin_spiPOCI = 25; //microSD SDO\nint pin_microSD_CS = 27;\n\n#define SD_CONFIG SdSpiConfig(pin_microSD_CS, SHARED_SPI, SD_SCK_MHZ(16))\n//#define SD_CONFIG SdSpiConfig(pin_microSD_CS, DEDICATED_SPI, SD_SCK_MHZ(16))\n\nconst int8_t DISABLE_CS_PIN = -1;\n\n//------------------------------------------------------------------------------\nSdFs sd;\ncid_t cid;\ncsd_t csd;\nscr_t scr;\nuint8_t cmd6Data[64];\nuint32_t eraseSize;\nuint32_t ocr;\nstatic ArduinoOutStream cout(Serial);\n//------------------------------------------------------------------------------\nvoid cidDmp() {\n  cout &lt;&lt; F(\"\\nManufacturer ID: \");\n  cout &lt;&lt; uppercase &lt;&lt; showbase &lt;&lt; hex &lt;&lt; int(cid.mid) &lt;&lt; dec &lt;&lt; endl;\n  cout &lt;&lt; F(\"OEM ID: \") &lt;&lt; cid.oid[0] &lt;&lt; cid.oid[1] &lt;&lt; endl;\n  cout &lt;&lt; F(\"Product: \");\n  for (uint8_t i = 0; i &lt; 5; i++) {\n    cout &lt;&lt; cid.pnm[i];\n  }\n  cout &lt;&lt; F(\"\\nRevision: \") &lt;&lt; cid.prvN() &lt;&lt; '.' &lt;&lt; cid.prvM() &lt;&lt; endl;\n  cout &lt;&lt; F(\"Serial number: \") &lt;&lt; hex &lt;&lt; cid.psn() &lt;&lt; dec &lt;&lt; endl;\n  cout &lt;&lt; F(\"Manufacturing date: \");\n  cout &lt;&lt; cid.mdtMonth() &lt;&lt; '/' &lt;&lt; cid.mdtYear() &lt;&lt; endl;\n  cout &lt;&lt; F(\"CID HEX: \");\n  hexDmp(&amp;cid, sizeof(cid));\n}\n//------------------------------------------------------------------------------\nvoid clearSerialInput() {\n  uint32_t m = micros();\n  do {\n    if (Serial.read() &gt;= 0) {\n      m = micros();\n    }\n  } while (micros() - m &lt; 10000);\n}\n//------------------------------------------------------------------------------\nvoid csdDmp() {\n  eraseSize = csd.eraseSize();\n  cout &lt;&lt; F(\"\\ncardSize: \") &lt;&lt; 0.000512 * csd.capacity();\n  cout &lt;&lt; F(\" MB (MB = 1,000,000 bytes)\\n\");\n\n  cout &lt;&lt; F(\"flashEraseSize: \") &lt;&lt; int(eraseSize) &lt;&lt; F(\" blocks\\n\");\n  cout &lt;&lt; F(\"eraseSingleBlock: \");\n  if (csd.eraseSingleBlock()) {\n    cout &lt;&lt; F(\"true\\n\");\n  } else {\n    cout &lt;&lt; F(\"false\\n\");\n  }\n  cout &lt;&lt; F(\"dataAfterErase: \");\n  if (scr.dataAfterErase()) {\n    cout &lt;&lt; F(\"ones\\n\");\n  } else {\n    cout &lt;&lt; F(\"zeros\\n\");\n  }\n  cout &lt;&lt; F(\"CSD HEX: \");\n  hexDmp(&amp;csd, sizeof(csd));\n}\n//------------------------------------------------------------------------------\nvoid errorPrint() {\n  if (sd.sdErrorCode()) {\n    cout &lt;&lt; F(\"SD errorCode: \") &lt;&lt; hex &lt;&lt; showbase;\n    printSdErrorSymbol(&amp;Serial, sd.sdErrorCode());\n    cout &lt;&lt; F(\" = \") &lt;&lt; int(sd.sdErrorCode()) &lt;&lt; endl;\n    cout &lt;&lt; F(\"SD errorData = \") &lt;&lt; int(sd.sdErrorData()) &lt;&lt; dec &lt;&lt; endl;\n  }\n}\n//------------------------------------------------------------------------------\nvoid hexDmp(void* reg, uint8_t size) {\n  uint8_t* u8 = reinterpret_cast&lt;uint8_t*&gt;(reg);\n  cout &lt;&lt; hex &lt;&lt; noshowbase;\n  for (size_t i = 0; i &lt; size; i++) {\n    cout &lt;&lt; setw(2) &lt;&lt; setfill('0') &lt;&lt; int(u8[i]);\n  }\n  cout &lt;&lt; dec &lt;&lt; endl;\n}\n//------------------------------------------------------------------------------\nbool mbrDmp() {\n  MbrSector_t mbr;\n  bool valid = true;\n  if (!sd.card()-&gt;readSector(0, (uint8_t*)&amp;mbr)) {\n    cout &lt;&lt; F(\"\\nread MBR failed.\\n\");\n    errorPrint();\n    return false;\n  }\n  cout &lt;&lt; F(\"\\nSD Partition Table\\n\");\n  cout &lt;&lt; F(\"part,boot,bgnCHS[3],type,endCHS[3],start,length\\n\");\n  for (uint8_t ip = 1; ip &lt; 5; ip++) {\n    MbrPart_t* pt = &amp;mbr.part[ip - 1];\n    if ((pt-&gt;boot != 0 &amp;&amp; pt-&gt;boot != 0X80) ||\n        getLe32(pt-&gt;relativeSectors) &gt; csd.capacity()) {\n      valid = false;\n    }\n    cout &lt;&lt; int(ip) &lt;&lt; ',' &lt;&lt; uppercase &lt;&lt; showbase &lt;&lt; hex;\n    cout &lt;&lt; int(pt-&gt;boot) &lt;&lt; ',';\n    for (int i = 0; i &lt; 3; i++) {\n      cout &lt;&lt; int(pt-&gt;beginCHS[i]) &lt;&lt; ',';\n    }\n    cout &lt;&lt; int(pt-&gt;type) &lt;&lt; ',';\n    for (int i = 0; i &lt; 3; i++) {\n      cout &lt;&lt; int(pt-&gt;endCHS[i]) &lt;&lt; ',';\n    }\n    cout &lt;&lt; dec &lt;&lt; getLe32(pt-&gt;relativeSectors) &lt;&lt; ',';\n    cout &lt;&lt; getLe32(pt-&gt;totalSectors) &lt;&lt; endl;\n  }\n  if (!valid) {\n    cout &lt;&lt; F(\"\\nMBR not valid, assuming Super Floppy format.\\n\");\n  }\n  return true;\n}\n//------------------------------------------------------------------------------\nvoid dmpVol() {\n  cout &lt;&lt; F(\"\\nScanning FAT, please wait.\\n\");\n  int32_t freeClusterCount = sd.freeClusterCount();\n  if (sd.fatType() &lt;= 32) {\n    cout &lt;&lt; F(\"\\nVolume is FAT\") &lt;&lt; int(sd.fatType()) &lt;&lt; endl;\n  } else {\n    cout &lt;&lt; F(\"\\nVolume is exFAT\\n\");\n  }\n  cout &lt;&lt; F(\"sectorsPerCluster: \") &lt;&lt; sd.sectorsPerCluster() &lt;&lt; endl;\n  cout &lt;&lt; F(\"fatStartSector:    \") &lt;&lt; sd.fatStartSector() &lt;&lt; endl;\n  cout &lt;&lt; F(\"dataStartSector:   \") &lt;&lt; sd.dataStartSector() &lt;&lt; endl;\n  cout &lt;&lt; F(\"clusterCount:      \") &lt;&lt; sd.clusterCount() &lt;&lt; endl;\n  cout &lt;&lt; F(\"freeClusterCount:  \");\n  if (freeClusterCount &gt;= 0) {\n    cout &lt;&lt; freeClusterCount &lt;&lt; endl;\n  } else {\n    cout &lt;&lt; F(\"failed\\n\");\n    errorPrint();\n  }\n}\n//------------------------------------------------------------------------------\nvoid printCardType() {\n  cout &lt;&lt; F(\"\\nCard type: \");\n\n  switch (sd.card()-&gt;type()) {\n    case SD_CARD_TYPE_SD1:\n      cout &lt;&lt; F(\"SD1\\n\");\n      break;\n\n    case SD_CARD_TYPE_SD2:\n      cout &lt;&lt; F(\"SD2\\n\");\n      break;\n\n    case SD_CARD_TYPE_SDHC:\n      if (csd.capacity() &lt; 70000000) {\n        cout &lt;&lt; F(\"SDHC\\n\");\n      } else {\n        cout &lt;&lt; F(\"SDXC\\n\");\n      }\n      break;\n\n    default:\n      cout &lt;&lt; F(\"Unknown\\n\");\n  }\n}\n//------------------------------------------------------------------------------\nvoid printConfig(SdSpiConfig config) {\n  if (DISABLE_CS_PIN &lt; 0) {\n    cout &lt;&lt; F(\n        \"\\nAssuming the SD is the only SPI device.\\n\"\n        \"Edit DISABLE_CS_PIN to disable an SPI device.\\n\");\n  } else {\n    cout &lt;&lt; F(\"\\nDisabling SPI device on pin \");\n    cout &lt;&lt; int(DISABLE_CS_PIN) &lt;&lt; endl;\n    pinMode(DISABLE_CS_PIN, OUTPUT);\n    digitalWrite(DISABLE_CS_PIN, HIGH);\n  }\n  cout &lt;&lt; F(\"\\nAssuming the SD chip select pin is: \") &lt;&lt; int(config.csPin);\n  cout &lt;&lt; F(\"\\nEdit SD_CS_PIN to change the SD chip select pin.\\n\");\n}\n//------------------------------------------------------------------------------\nvoid printConfig(SdioConfig config) {\n  (void)config;\n  cout &lt;&lt; F(\"Assuming an SDIO interface.\\n\");\n}\n//-----------------------------------------------------------------------------\nvoid setup() {\n  Serial.begin(115200);\n  delay(250);\n  Serial.println(\"SPI test\");\n\n  SPI.begin(pin_spiSCK, pin_spiPOCI, pin_spiPICO);\n\n  cout &lt;&lt; F(\"SdFat version: \") &lt;&lt; SD_FAT_VERSION_STR &lt;&lt; endl;\n  printConfig(SD_CONFIG);\n}\n//------------------------------------------------------------------------------\nvoid loop() {\n  // Read any existing Serial data.\n  clearSerialInput();\n\n  // F stores strings in flash to save RAM\n  cout &lt;&lt; F(\"\\ntype any character to start\\n\");\n  while (!Serial.available()) {\n    yield();\n  }\n  uint32_t t = millis();\n  if (!sd.cardBegin(SD_CONFIG)) {\n    cout &lt;&lt; F(\n        \"\\nSD initialization failed.\\n\"\n        \"Do not reformat the card!\\n\"\n        \"Is the card correctly inserted?\\n\"\n        \"Is there a wiring/soldering problem?\\n\");\n    if (isSpi(SD_CONFIG)) {\n      cout &lt;&lt; F(\n          \"Is SD_CS_PIN set to the correct value?\\n\"\n          \"Does another SPI device need to be disabled?\\n\");\n    }\n    errorPrint();\n    return;\n  }\n  t = millis() - t;\n  cout &lt;&lt; F(\"init time: \") &lt;&lt; dec &lt;&lt; t &lt;&lt; \" ms\" &lt;&lt; endl;\n\n  if (!sd.card()-&gt;readCID(&amp;cid) || !sd.card()-&gt;readCSD(&amp;csd) ||\n      !sd.card()-&gt;readOCR(&amp;ocr) || !sd.card()-&gt;readSCR(&amp;scr)) {\n    cout &lt;&lt; F(\"readInfo failed\\n\");\n    errorPrint();\n    return;\n  }\n  printCardType();\n  cout &lt;&lt; F(\"sdSpecVer: \") &lt;&lt; 0.01 * scr.sdSpecVer() &lt;&lt; endl;\n  cout &lt;&lt; F(\"HighSpeedMode: \");\n  if (scr.sdSpecVer() &gt; 101 &amp;&amp; sd.card()-&gt;cardCMD6(0X00FFFFFF, cmd6Data) &amp;&amp;\n      (2 &amp; cmd6Data[13])) {\n    cout &lt;&lt; F(\"true\\n\");\n  } else {\n    cout &lt;&lt; F(\"false\\n\");\n  }\n  cidDmp();\n  csdDmp();\n  cout &lt;&lt; F(\"\\nOCR: \") &lt;&lt; uppercase &lt;&lt; showbase;\n  cout &lt;&lt; hex &lt;&lt; ocr &lt;&lt; dec &lt;&lt; endl;\n  if (!mbrDmp()) {\n    return;\n  }\n  if (!sd.volumeBegin()) {\n    cout &lt;&lt; F(\"\\nvolumeBegin failed. Is the card formatted?\\n\");\n    errorPrint();\n    return;\n  }\n  dmpVol();\n}\n</code></pre> <p>You will also need to install the SDFat Arduino Library if you haven't already. You can search the library from within the Arduino Library manager, download the zip from the GitHub Repository and install it manually, or you can click the link from within the code. </p> <p>Make sure you've selected the correct board and port in the Tools menu and then hit the upload button. Once the code has finished uploading, go ahead and open a Serial Monitor at 115200 baud. Once you type in any key in the Message Field and send it, the code will analyze the SD card and output something similar to the following: </p> <p></p> <p>Example 4 Output</p>"},{"location":"hard_copy/","title":"Hard copy","text":"<p>Need to download or print our hookup guide?</p> <ul> <li>Print  (Single-Page View)<ul> <li>To save as a <code>*.pdf</code> file, select the Printer or Destination labeled Save as PDF. (Instructions will vary based on the browser)</li> </ul> </li> </ul>"},{"location":"hardware_assembly/","title":"Hardware Assembly","text":"<p>The Portability Shield has been designed to be usable with any compatible main board. Here we have soldered in headers and it is plugged into the RTK Postcard. Note that there is an antenna attached to the module, as well as a LiPo battery plugged into the JST port. </p> <p></p> <p>SparkFun Portability Shield and RTK Postcard</p>"},{"location":"hardware_overview/","title":"Hardware Overview","text":""},{"location":"hardware_overview/#oled","title":"OLED","text":"<p>The 1.3\" OLED is a small, monochrome, blue on black display with a 128 x 64 dot matrix panel and a 7-bit unshifted I<sup>2</sup>C address of 0x3D. To change the I<sup>2</sup>C address to 0x3C, cut the D/C jumper on the back of the board. For more information, refer to the datasheet.</p> <p></p> <p>1.3\" OLED Screen</p>"},{"location":"hardware_overview/#navigation-switch","title":"Navigation Switch","text":"<p>The Navigation Switch allows for navigation of the configuration modes and menus related to the RTK or other loaded software. </p> <p></p> <p>Navigation Switch</p>"},{"location":"hardware_overview/#gpio-expander","title":"GPIO Expander","text":"<p>The TCA9554 GPIO Expander is used for I<sup>2</sup>C interfacing with the Navigation Switch, 1.3\" OLED display, the fuel gauge, and the SD Card Detect. Its 7-bit unshifted address is 0x20.</p> <p></p> <p>GPIO Expander</p>"},{"location":"hardware_overview/#power","title":"Power","text":"<p>Power is provided by either the LiPo Battery or the 5V/GND pins. Maximum input to the board is 5V. </p> <p></p> <p>Battery Connector/Power Pins</p>"},{"location":"hardware_overview/#current-measurement","title":"Current Measurement","text":"<p>There are two plated through holes available on the bottom of the board to measure current if desired. </p> <p></p> <p>Current Measurement PTHs</p>"},{"location":"hardware_overview/#onoff-switch","title":"On/Off Switch","text":"<p>How handy! There is an On/Off switch at the top of the board. </p> <p></p> <p>On/Off Switch</p>"},{"location":"hardware_overview/#fuel-gauge","title":"Fuel Gauge","text":"<p>The MAX17048 uses the Li+ battery-modeling algorithm ModelGauge\u2122 to track the battery relative state-of-charge (SOC) continuously over widely varying charge and discharge conditions. This eliminates current-sense resistor and battery learn cycles required in traditional fuel gauges and allows for the most accurate battery percentage readings. Its 7-bit unshifted address is 0x36. For more information, you can refer to the datasheet. </p> <p></p> <p>Fuel Gauge</p>"},{"location":"hardware_overview/#lipo-charging-circuit","title":"LiPo Charging Circuit","text":"<p>The charge circuit charges Li+ batteries at 500mA. The equation below shows our calculation for this rate. </p> <p></p> <p>Charge Circuit</p>"},{"location":"hardware_overview/#microsd-card","title":"MicroSD Card","text":"<p>The microSD Socket Friction Fit slot allows for data logging or easy upload of programming files. </p> <p>Warning</p> <p>Do NOT drive the microSD card pins high if the card is not powered. Damage could occur! </p> <p></p> <p>microSD Card Slot</p>"},{"location":"hardware_overview/#shield-connectors","title":"Shield Connectors","text":"<p>The offset PTHs allow for a snug fit when soldering headers to the board. Once male headers are soldered in, the SparkFun Portability Shield can be fit to the main board of choice. </p> <p>If 5V is present, LiPo charging commences. Below 5V, the battery will provide VBATT to the mainboard 3.3V is not provided to mainboard - 5V/VBATT powers local 3.3V_P. </p> <p></p> <p>Shield Connectors</p>"},{"location":"hardware_overview/#jumpers","title":"Jumpers","text":"<ul> <li> <p>CHG:     Cutting this jumper will disconnect the power to the CHG LED on the front of the board. </p> </li> <li> <p>PWR:     Cutting this jumper will disconnect the power to the PWR LED on the front of the board. </p> </li> <li> <p>D/C:     Cutting this jumper will change the I<sup>2</sup>C address from 0x3D to 0x3C.</p> </li> </ul> D/C              I2C Addr              0              0x3C              1              0x3D (default)              <ul> <li>I<sup>2</sup>C:     The SparkFun Portability Shield has built-in 2.2k pull-up resistors on the SDA and SCL lines. These are needed for normal I<sup>2</sup>C communication. The I<sup>2</sup>C jumper has two small traces connecting the pull-ups to 3.3V. For general use you can leave this jumper unmodified. If you have many (over 7) devices on the I<sup>2</sup>C bus, each with their own pull up resistors, then you may want to cut the I<sup>2</sup>C jumpers to disconnect the 2.2k resistors on each Qwiic board.</li> </ul> <p></p> <p>Jumpers</p>"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>The board dimensions are illustrated in the drawing below; the listed measurements are in millimeters.</p> <p></p> <p>SparkFun Portability Shield Board Dimensions</p>"},{"location":"introduction/","title":"Introduction","text":"<ul> <li> <p> SparkFun Portability Shield SKU: DEV-27510 <p> </p> <li> <p>The SparkFun Portability Shield adds all the user interface bits needed to take a SparkFun dev board into the field. A LiPo battery connector, charger, fuel gauge, and an on/off switch take care of your power needs. A friction-fit microSD connector allow for datalogging. The 1.3\" OLED and a 5-way navigation switch allow for an excellent user interface. Locking 0.1\" headers along the edge of the shield make it easier to solder male pins in place.</p> <p>I<sup>2</sup>C is used to interface to the display, fuel gauge, and the 5 way navigation switch (GPIO expander PCA9554), SPI is used to communicate with the microSD card. The power switch uses an ideal diode (LM66200) to disconnect the battery from the system for a sleep current of approximately 4\u03bcA.</p> </li> <p> Purchase from SparkFun  </p>"},{"location":"introduction/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything, depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> SparkFun Portability Shield              DEV-27510          SparkFun RTK Postcard              GPS-26916"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>Below are a few tutorials that may help users familiarize themselves with various aspects of the board.</p> <ul> <li> What is GPS RTK </li> <li> SparkFun RTK Everywhere Product Manual </li> </ul>"},{"location":"resources/","title":"Resources","text":"<p>For more resources related to the SparkFun Portability Shield, check out the links listed here: </p> <ul> <li>Product Page</li> <li>Schematic (PDF)</li> <li>KiCad Files (ZIP)</li> <li>Board Dimensions</li> <li>Hardware GitHub Respository</li> </ul>"},{"location":"single_page/","title":"Single page","text":"<ul> <li> <p> SparkFun Portability Shield SKU: DEV-27510 <p> </p> <li> <p>The SparkFun Portability Shield adds all the user interface bits needed to take a SparkFun dev board into the field. A LiPo battery connector, charger, fuel gauge, and an on/off switch take care of your power needs. A friction-fit microSD connector allow for datalogging. The 1.3\" OLED and a 5-way navigation switch allow for an excellent user interface. Locking 0.1\" headers along the edge of the shield make it easier to solder male pins in place.</p> <p>I<sup>2</sup>C is used to interface to the display, fuel gauge, and the 5 way navigation switch (GPIO expander PCA9554), SPI is used to communicate with the microSD card. The power switch uses an ideal diode (LM66200) to disconnect the battery from the system for a sleep current of approximately 4\u03bcA.</p> </li> <p> Purchase from SparkFun  </p>"},{"location":"single_page/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything, depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> SparkFun Portability Shield              DEV-27510          SparkFun RTK Postcard              GPS-26916"},{"location":"single_page/#suggested-reading","title":"Suggested Reading","text":"<p>Below are a few tutorials that may help users familiarize themselves with various aspects of the board.</p> <ul> <li> What is GPS RTK </li> <li> SparkFun RTK Everywhere Product Manual </li> </ul>"},{"location":"single_page/#hardware-overview","title":"Hardware Overview","text":""},{"location":"single_page/#oled","title":"OLED","text":"<p>The 1.3\" OLED is a small, monochrome, blue on black display with a 128 x 64 dot matrix panel and a 7-bit unshifted I<sup>2</sup>C address of 0x3D. To change the I<sup>2</sup>C address to 0x3C, cut the D/C jumper on the back of the board. For more information, refer to the datasheet.</p> <p></p> <p>1.3\" OLED Screen</p>"},{"location":"single_page/#navigation-switch","title":"Navigation Switch","text":"<p>The Navigation Switch allows for navigation of the configuration modes and menus related to the RTK or other loaded software. </p> <p></p> <p>Navigation Switch</p>"},{"location":"single_page/#gpio-expander","title":"GPIO Expander","text":"<p>The TCA9554 GPIO Expander is used for I<sup>2</sup>C interfacing with the Navigation Switch, 1.3\" OLED display, the fuel gauge, and the SD Card Detect. Its 7-bit unshifted address is 0x20.</p> <p></p> <p>GPIO Expander</p>"},{"location":"single_page/#power","title":"Power","text":"<p>Power is provided by either the LiPo Battery or the 5V/GND pins. Maximum input to the board is 5V. </p> <p></p> <p>Battery Connector/Power Pins</p>"},{"location":"single_page/#current-measurement","title":"Current Measurement","text":"<p>There are two plated through holes available on the bottom of the board to measure current if desired. </p> <p></p> <p>Current Measurement PTHs</p>"},{"location":"single_page/#onoff-switch","title":"On/Off Switch","text":"<p>How handy! There is an On/Off switch at the top of the board. </p> <p></p> <p>On/Off Switch</p>"},{"location":"single_page/#fuel-gauge","title":"Fuel Gauge","text":"<p>The MAX17048 uses the Li+ battery-modeling algorithm ModelGauge\u2122 to track the battery relative state-of-charge (SOC) continuously over widely varying charge and discharge conditions. This eliminates current-sense resistor and battery learn cycles required in traditional fuel gauges and allows for the most accurate battery percentage readings. Its 7-bit unshifted address is 0x36. For more information, you can refer to the datasheet. </p> <p></p> <p>Fuel Gauge</p>"},{"location":"single_page/#lipo-charging-circuit","title":"LiPo Charging Circuit","text":"<p>The charge circuit charges Li+ batteries at 500mA. The equation below shows our calculation for this rate. </p> <p></p> <p>Charge Circuit</p>"},{"location":"single_page/#microsd-card","title":"MicroSD Card","text":"<p>The microSD Socket Friction Fit slot allows for data logging or easy upload of programming files. </p> <p>Warning</p> <p>Do NOT drive the microSD card pins high if the card is not powered. Damage could occur! </p> <p></p> <p>microSD Card Slot</p>"},{"location":"single_page/#shield-connectors","title":"Shield Connectors","text":"<p>The offset PTHs allow for a snug fit when soldering headers to the board. Once male headers are soldered in, the SparkFun Portability Shield can be fit to the main board of choice. </p> <p>If 5V is present, LiPo charging commences. Below 5V, the battery will provide VBATT to the mainboard 3.3V is not provided to mainboard - 5V/VBATT powers local 3.3V_P. </p> <p></p> <p>Shield Connectors</p>"},{"location":"single_page/#jumpers","title":"Jumpers","text":"<ul> <li> <p>CHG:     Cutting this jumper will disconnect the power to the CHG LED on the front of the board. </p> </li> <li> <p>PWR:     Cutting this jumper will disconnect the power to the PWR LED on the front of the board. </p> </li> <li> <p>D/C:     Cutting this jumper will change the I<sup>2</sup>C address from 0x3D to 0x3C.</p> </li> </ul> D/C              I2C Addr              0              0x3C              1              0x3D (default)              <ul> <li>I<sup>2</sup>C:     The SparkFun Portability Shield has built-in 2.2k pull-up resistors on the SDA and SCL lines. These are needed for normal I<sup>2</sup>C communication. The I<sup>2</sup>C jumper has two small traces connecting the pull-ups to 3.3V. For general use you can leave this jumper unmodified. If you have many (over 7) devices on the I<sup>2</sup>C bus, each with their own pull up resistors, then you may want to cut the I<sup>2</sup>C jumpers to disconnect the 2.2k resistors on each Qwiic board.</li> </ul> <p></p> <p>Jumpers</p>"},{"location":"single_page/#board-dimensions","title":"Board Dimensions","text":"<p>The board dimensions are illustrated in the drawing below; the listed measurements are in millimeters.</p> <p></p> <p>SparkFun Portability Shield Board Dimensions</p>"},{"location":"single_page/#hardware-assembly","title":"Hardware Assembly","text":"<p>The Portability Shield has been designed to be usable with any compatible main board. Here we have soldered in headers and it is plugged into the RTK Postcard. Note that there is an antenna attached to the module, as well as a LiPo battery plugged into the JST port. </p> <p></p> <p>SparkFun Portability Shield and RTK Postcard</p>"},{"location":"single_page/#troubleshooting-tips","title":"Troubleshooting Tips","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p>"},{"location":"single_page/#resources","title":"Resources:","text":"<p>For more resources related to the SparkFun Portability Shield, check out the links listed here: </p> <ul> <li>Product Page</li> <li>Schematic (PDF)</li> <li>KiCad Files (ZIP)</li> <li>Board Dimensions</li> <li>Hardware GitHub Respository</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p>"},{"location":"github/contribute/","title":"Contribute: Make an Augmentation!","text":"<p>Spot an improvement opportunity? Feel free to contribute to our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun Portability Shield repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your corrections or improvements to the markdown file.</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Portability Shield repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-enhancement","title":"Submit a Design Enhancement","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provide some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. This Submit Issues page is not where users should seek assistance.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search the product forums and ask questions.</p> <p>Account Registration Required</p> <p>For your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of our documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun Portability Shield repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"\ud83d\udd0d Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Portability Shield repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense? \ud83e\udd14","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board? \ud83e\udd26","text":"<p>If part of the board's functionality is missing, please open an issue and file a feature request.</p> <p>Design Considerations</p> <p>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements.</p> <ul> <li>For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"}]}